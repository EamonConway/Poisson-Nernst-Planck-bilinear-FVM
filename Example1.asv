%% Example of high aspect ratio simulation of PNP equations.


N = 15; % number of nodes in vertical direction.
M = 101; % number of nodes in horizontal direction
L_x = 1; % horizontal length
L_y = 1; % vertical length

x = linspace(0,L_x,M); % x-location of nodes.
x = unique([beg,middle,end_nodes]);
y = linspace(0,L_y,N); % y-location of nodes

%% Create Node and element structure.

[X,Y] = meshgrid(x,y); % create mesh.

Xvec = X(:);
Yvec = Y(:);

num_nodes = length(x)*length(y);
num_elements = (length(x)-1)*(length(y)-1);

nodes = [(1:num_nodes)',Xvec,Yvec];
first = (1:num_nodes-N)';
first(N:N:end) = [];
second=(N+1:num_nodes)';
second(N:N:end) = [];
third = (N+1:num_nodes)';
third(1:N:end) = [];
fourth = (1:num_nodes-N)';
fourth(1:N:end) = [];

element = [(1:num_elements)', first,second,third,fourth];

% Calculate control volume size and length of faces
Control_Volume = zeros(num_nodes,1);
DL = [(1:num_elements)',zeros(num_elements,4)];
for j = 1:element(end,1)
    
    temp_nodes = element(j,2:end);
    temp_node_coord = nodes(temp_nodes,2:end);
    temp_centre = mean(temp_node_coord);
    
    for i = 1:4
        point_1 = temp_node_coord(i,:);
        point_2 = 0.5*(temp_node_coord(i,:) + temp_node_coord(mod(i,4)+1,:));
        point_3 = temp_centre;
        point_4 = 0.5*(temp_node_coord(i,:) + temp_node_coord(4 - mod(4-i+1,4),:));
        points = [point_1;point_2;point_3;point_4];
        r_c    = mean(points(:,2));
        temp_volume = r_c*polyarea(points(:,1),points(:,2));
        Control_Volume(temp_nodes(i)) = Control_Volume(temp_nodes(i)) + temp_volume;
        face_cenre = temp_centre - point_2;
        DL(j,i+1) = norm(point_2-temp_centre);
       
    end
end

%% Defining Parameters for simulation
D = [2.83e-9,1.83e-9]; % Diffusion Coefficient
R = 8.31447215; % Gas Constant
T = 298.15; % Temperature
F = 9.6485339e4; % Faradays constant
z = [-1, 1];% Valence
epsilon_0               = 8.854187817e-12;
epsilon                 = 80*epsilon_0; % Permittivity

%% Nondimensional Parameters 
C_0   = 100;
Phi_0 = R*T/F;
T_0   = 5e-3;
L_0   = (20e-9);

%% Parameter
Parameters.D = D;
Parameters.R = R;
Parameters.T = T;
Parameters.F = F;
Parameters.z = z;
Parameters.permit = epsilon;
Parameters.L_0  = L_0;
Parameters.C_0 = C_0;
Parameters.Phi_0 = Phi_0;
Parameters.T_0 = T_0;
Parameters.mu  = T_0/L_0^2;
Parameters.varphi = F/(R*T)*Phi_0;
Parameters.L_x  = max(nodes(:,2));
Parameters.L_y  = max(nodes(:,3));
% Parameters.psi = F*L_0^2*C_0/(epsilon*Phi_0); % Non-Dimensional coefficient in Poisson equation
Parameters.psi = F*L_0^2*C_0/Phi_0;
Parameters.InitC = (100/C_0);
Parameters.a = 0*[1e-4;1e-4];
    C_bar = C_0*L_0;
Parameters.r_bar = (Parameters.a/L_0)*C_bar;
Parameters.N     = length(nodes); % number of nodes
% Parameters.k_1   = 0*1e-8;
Parameters.k     = 0*[1e-8 1e-9];
Parameters.Lambda_S = 1e-10;
Parameters.DL = DL;
InitConc = Parameters.InitC;
Parameters.V = @(t) -0.07/Phi_0*tanh(1000*t);
y0  = zeros(3*num_nodes,1);
y0(1:3:end) =  InitConc;
y0(2:3:end) =  InitConc;
yp0 = zeros(3*num_nodes,1);
t_0 = 0;
t_end = 0.0166;
jacobian_calc;

% time_points = [];
options = odeset('JPattern',{dfdy,dfdyp},'InitialStep',1e-6,'Events',@eventfun,'AbsTol',1e-12,'RelTol',1e-12,'Stats','on','OutputFcn',@(t,y,flag)timepoints(t,y,flag,t_0)); 
% options = odeset('InitialStep',1e-6,'Events',@eventfun); 

yp0 = -bilinear_system(t_0,y0,yp0,Control_Volume,Parameters,element,nodes,BoundaryElements);
tic
[TOUT,XOUT] = ode15i(@(t,y,yp) bilinear_system(t,y,yp,Control_Volume,Parameters,element,nodes,BoundaryElements),[t_0 t_end],y0,yp0,options);
timing(kk) = toc;
% sim_time = toc;
% toc
% toc
% ZZC1 = XOUT(end,1:3:end);
% ZZC2 = XOUT(end,2:3:end);
% ZZPhi= XOUT(end,3:3:end);
%% Plot

% save(['Large_Domain_108/' num2str(nodes_doublelayer)],'nodes','element','Parameters','ZZC1','ZZC2','ZZPhi');
end
ZZC1 = XOUT(end,1:3:end);
ZZC2 = XOUT(end,2:3:end);
ZZPhi= XOUT(end,3:3:end);
save(['TimePoints/' num2str(nodes_doublelayer)],'nodes','element','Parameters','ZZC1','ZZC2','ZZPhi','timing','TOUT','time_points');
% nodes(:,2:3) = nodes(:,2:3)*L_0;
% figure
% % for i = 1:length(nodes);
% plot3(nodes(:,2),nodes(:,3),C_0*ZZC1(:),'k.')
% hold on 
% plot3(nodes(:,2),-nodes(:,3),C_0*ZZC1(:),'k.')
% % end
% 
% figure
% for i = 1:length(nodes);
% plot3(nodes(i,2),nodes(i,3),C_0*ZZC2(i))
% hold on 
% plot3(nodes(i,2),-nodes(i,3),C_0*ZZC2(i))
% end
% 
% figure
% for i = 1:length(nodes);
% plot3(nodes(i,2),nodes(i,3),Phi_0*ZZPhi(i),'r.')
% hold on 
% plot3(nodes(i,2),-nodes(i,3),Phi_0*ZZPhi(i),'r.')
% end
% 
% % xq = L_0*[nanopore_begin, nanopore_begin+nanopore_length, nanopore_begin+nanopore_length, nanopore_begin];
% % yq = L_0*[max(y_nanopore_beg), max(y_nanopore_end),max(y_nanopore_end)+9,max(y_nanopore_end)+9];
% % % 
% xx = linspace(min(nodes(:,2)),max(nodes(:,2)),1000);
% yy = linspace(min(nodes(:,3)),max(nodes(:,3)),100);
% 
% [xx,yy] = meshgrid(xx,yy);
% 
% zzc1 = griddata(nodes(:,2), nodes(:,3), C_0*ZZC1,xx,yy);
% zzc2 = griddata(nodes(:,2), nodes(:,3), C_0*ZZC2,xx,yy);
% zzphi = griddata(nodes(:,2), nodes(:,3), Phi_0*ZZPhi,xx,yy);
% % % % % 
% % in = inpolygon(xx,yy,xq,yq);
% % xx(in) = nan;
% % yy(in) = nan;
% % zzc1(in) = nan;
% % zzc2(in) = nan;
% % zzphi(in) = nan;
% % % % % 
% % figure
% % surf(xx,yy,zzc1);
% % shading flat
% % figure
% % surf(xx,yy,zzc2);
% % shading flat
% % figure
% % surf(xx,yy,zzphi);
% % shading flat
% % % % % 
% % figure
% % contourf(zzphi,[-0.1:0.005:0])
% % colorbar
% % caxis([-0.1 -0.075])
% % ZZC1 = reshape(XOUT(end,1:3:end),length(y),length(x));
% % ZZC2 = reshape(XOUT(end,2:3:end),length(y),length(x));
% % ZZPhi = reshape(XOUT(end,3:3:end),length(y),length(x));
% % figure
% % surf(XX,YY,Parameters.C_0*ZZC1);
% % figure
% % surf(XX,YY,Parameters.C_0*ZZC2);
% % figure
% % surf(XX,YY,Parameters.Phi_0*ZZPhi);